/**
 * Node.js binding for Leopard speech-to-text engine.
 *
 * Performs the calls to the Leopard node library. Does some basic parameter validation to prevent
 * errors occurring in the library layer. Provides clearer error messages in native JavaScript.
 */
export default class Leopard {
    private _pvLeopard;
    private _handle;
    private readonly _version;
    private readonly _sampleRate;
    /**
     * Creates an instance of Leopard.
     * @param {string} accessKey AccessKey obtained from Picovoice Console (https://console.picovoice.ai/).
     * @param {string} modelPath the path to the Leopard model (.pv extension)
     * @param {string} libraryPath the path to the Leopard dynamic library (.node extension)
     */
    constructor(accessKey: string, modelPath?: string, libraryPath?: string);
    /**
     * @returns the audio sampling rate accepted by the process function
     * @see {@link process}
     */
    get sampleRate(): number;
    /**
     * @returns the version of the Leopard engine
     */
    get version(): string;
    /**
     * Processes a given audio data and returns its transcription.
     *
     * @param {Int16Array} pcm Audio data. The audio needs to have a sample rate equal to `Leopard.sampleRate` and be 16-bit linearly-encoded.
     * This function operates on single-channel audio. If you wish to process data in a different
     * sample rate or format consider using `Leopard.processFile()`.
     * @returns {string} Inferred transcription.
     */
    process(pcm: Int16Array): string;
    /**
     * Processes a given audio file and returns its transcription.
     *
     * @param {string} audioPath Absolute path to the audio file.
     * The file needs to have a sample rate equal to or greater than `.sampleRate`.
     * The supported formats are: `FLAC`, `MP3`, `Ogg`, `Opus`, `Vorbis`, `WAV`, and `WebM`.
     * @returns {string} Inferred transcription.
     */
    processFile(audioPath: string): string;
    /**
     * Releases the resources acquired by Leopard.
     *
     * Be sure to call this when finished with the instance
     * to reclaim the memory that was allocated by the C library.
     */
    release(): void;
}
//# sourceMappingURL=leopard.d.ts.map